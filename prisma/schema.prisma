// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - minimal data since Clerk handles most user info
model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String
  name      String?
  isAdmin   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  createdSessions GameSession[]
  playerBoards    PlayerBoard[]
  wins            Winner[]

  @@map("users")
}

// Travel locations for the bingo game
model Location {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  imageUrl    String?
  category    String?  // e.g., "city", "natural", "cultural"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  playerBoards     PlayerBoardLocation[]
  revealedLocations RevealedLocation[]

  @@map("locations")
}

// Game sessions created by admins
model GameSession {
  id                String      @id @default(cuid())
  code              String      @unique // 6-character join code
  status            GameStatus  @default(WAITING)
  revealInterval    Int         // minutes between reveals
  currentRevealIndex Int        @default(0)
  maxReveals        Int         @default(50) // total possible reveals
  createdById       String
  startedAt         DateTime?
  endedAt           DateTime?
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relations
  createdBy         User              @relation(fields: [createdById], references: [id])
  playerBoards      PlayerBoard[]
  revealedLocations RevealedLocation[]
  winners           Winner[]

  @@map("game_sessions")
}

// Player's bingo board for a specific session
model PlayerBoard {
  id         String   @id @default(cuid())
  userId     String
  sessionId  String
  boardLayout Json    // 5x5 grid layout with location positions
  isReady    Boolean  @default(false)
  joinedAt   DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  user      User              @relation(fields: [userId], references: [id])
  session   GameSession       @relation(fields: [sessionId], references: [id])
  locations PlayerBoardLocation[]
  wins      Winner[]

  @@unique([userId, sessionId])
  @@map("player_boards")
}

// Junction table for locations on player boards
model PlayerBoardLocation {
  id         String @id @default(cuid())
  boardId    String
  locationId String
  position   Int    // 0-24 (5x5 grid, center is 12)
  isSelected Boolean @default(false) // player marked this tile

  // Relations
  board    PlayerBoard @relation(fields: [boardId], references: [id], onDelete: Cascade)
  location Location    @relation(fields: [locationId], references: [id])

  @@unique([boardId, position])
  @@map("player_board_locations")
}

// Locations revealed during a game session
model RevealedLocation {
  id         String   @id @default(cuid())
  sessionId  String
  locationId String
  revealIndex Int     // order of reveal (1st, 2nd, etc.)
  revealedAt DateTime @default(now())

  // Relations
  session  GameSession @relation(fields: [sessionId], references: [id])
  location Location    @relation(fields: [locationId], references: [id])

  @@unique([sessionId, revealIndex])
  @@map("revealed_locations")
}

// Winners of game sessions
model Winner {
  id         String     @id @default(cuid())
  sessionId  String
  userId     String
  boardId    String
  winPattern String     // e.g., "row-1", "column-2", "diagonal-1"
  place      Int        // 1st, 2nd, 3rd place
  wonAt      DateTime   @default(now())

  // Relations
  session GameSession @relation(fields: [sessionId], references: [id])
  user    User        @relation(fields: [userId], references: [id])
  board   PlayerBoard @relation(fields: [boardId], references: [id])

  @@unique([sessionId, place])
  @@map("winners")
}

// Enums
enum GameStatus {
  WAITING    // waiting for players to join and set up boards
  STARTING   // game is about to start
  ACTIVE     // game is in progress
  PAUSED     // game is paused
  ENDED      // game has ended
}
